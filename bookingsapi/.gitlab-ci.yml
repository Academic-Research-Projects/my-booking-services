# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#
# The mysql service needs some variables too. See https://hub.docker.com/_/mysql for possible mysql env variables
# Note that when using a service in GitLab CI/CD that needs environment variables to run, only variables defined in
# .gitlab-ci.yml are passed to the service and variables defined in the GitLab UI are not.
# https://gitlab.com/gitlab-org/gitlab/-/issues/30178

variables:
  # DJANGO_CONFIG: "test"
  # MYSQL_DATABASE: $MYSQL_DB
  # MYSQL_ROOT_PASSWORD: $MYSQL_PASS
  # MYSQL_USER: $MYSQL_USER
  # MYSQL_PASSWORD: $MYSQL_PASS
  DOCKER_HOST: 'tcp://gitlab-runner-dind:2375' # name of the container running which provides the DinD and the default port I suppose
  # Use the overlayfs driver for improved performance:
  DOCKER_DRIVER: overlay2 # optionnal
  DOCKER_TLS_CERTDIR: "" # optionnal

default:
  image: docker:stable # does not need to be equal to the [runners.docker]...image = "docker:latest" in the runner config.toml apparently
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  
  services:
    - name: docker:dind
      alias: gitlab-runner-dind # name of the container running which provides the DinD
      entrypoint: ["dockerd-entrypoint.sh"]
      command:
        [
          "--insecure-registry",
          "172.16.239.2:5000",
        ]
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  # cache:
  #   paths:
  #     - ~/.cache/pip/

  before_script:
    - docker info

    # Install Docker Compose
    - apk update
    - apk upgrade
    - apk add --no-cache docker-compose
    - docker-compose --version

    # Install ansible
    - ls -l
    #- apk add ansible && ansible --version
    #- ansible --version
    #- echo $ANSIBLE_VAULT_PASSWORD > vault_password.txt


# define stages of the pipeline
stages:
  - build-and-deploy

# test job
# hello-world:
#   stage: build
#   script:
#     - echo 'hello world'

# our unit tests are only working locally
# maybe we have to setup the database to perform them
# something like that

# django-unit-tests:
#   stage: build
#   script:
#     # The MYSQL user only gets permissions for MYSQL_DB, so Django can't create a test database.
#     - echo "GRANT ALL on *.* to '${MYSQL_USER}';"| mysql -u root --password="${MYSQL_ROOT_PASSWORD}" -h mysql
#     # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
#     - python3 manage.py test

build-and-deploy:
  stage: build-and-deploy
  before_script:
    - apk add --update ansible && ansible --version
    - apk add --update ansible openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY"
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H 172.16.239.2 >> ~/.ssh/known_hosts
    #- echo $ANSIBLE_VAULT_PASSWORD > vault_password.txt
    #- export ANSIBLE_VAULT_PASSWORD=vault_password.txt

  script:
    - cat ./docker_hub_password | docker login -u corentinbdt --password-stdin

    - docker build -t 172.16.239.2:5000/bookings-api:0.1 bookings_api/

    - docker image ls

    - docker push 172.16.239.2:5000/bookings-api:0.1

    #- echo $ANSIBLE_VAULT_PASSWORD > vault_password.txt

    #- export ANSIBLE_VAULT_PASSWORD_FILE=vault_password.txt

    #- ansible-playbook -i ansible/inventory/inventory.yaml ansible/playbook-deploy-users.yaml --vault-password-file vault_password.txt

    # remove running container
    # it's going to be something like :
    # - docker stack rm usersapi

    # deploy new container using ansible
    - ansible-playbook -i ansible/inventory/inventory.yaml ansible/playbook-deploy-bookings.yaml

    #- ansible-playbook -i ansible/inventory/inventory.yaml ansible/playbook-deploy-users.yaml --vault-password-file ansible/inventory/group_vars/vault.yaml
    
  #after_script:

    #- rm vault_password.txt

    #- ansible-playbook -i ansible/inventory/inventory.yaml ansible/playbook-deploy-users.yaml

    # docker pull mysql:latest
    # docker image tag mysql:latest 172.16.239.2:5000/mysql:latest # rename the mysql image to push it to the registry
    
    # image_id=$(sudo docker images -q mysql:latest) # in case we need to get the image id to rename it
    # echo $image_id
    
    # - python3 manage.py makemigrations
    # - python3 manage.py makemigrations myapp
    # - python3 manage.py migrate
    # - python3 manage.py check


# push-to-registry: # we can push images separatly, or use docker compose
#   stage: deploy
#   script:
#     - docker image ls

#     - docker-compose push
    
    # docker push 172.16.239.2:5000/users-api:0.1
    # docker push 172.16.239.2:5000/mysql:latest

# deploy-in-swarm: # we can deploy using a docker stack file or a docker compose file
#   stage: deploy
#   script:
#     - docker stack deploy --compose-file docker-compose.yml stackdemo

    
  # environment: production
